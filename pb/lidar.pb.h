// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: lidar.proto

#ifndef PROTOBUF_lidar_2eproto__INCLUDED
#define PROTOBUF_lidar_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3000000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3000000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
#include <google/protobuf/empty.pb.h>
// @@protoc_insertion_point(includes)

namespace device {

// Internal implementation detail -- do not call these.
void protobuf_AddDesc_lidar_2eproto();
void protobuf_AssignDesc_lidar_2eproto();
void protobuf_ShutdownFile_lidar_2eproto();

class connect_info;
class lidar_raw_point;
class lidar_raw_points;
class token;

// ===================================================================

class lidar_raw_point : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:device.lidar_raw_point) */ {
 public:
  lidar_raw_point();
  virtual ~lidar_raw_point();

  lidar_raw_point(const lidar_raw_point& from);

  inline lidar_raw_point& operator=(const lidar_raw_point& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const lidar_raw_point& default_instance();

  void Swap(lidar_raw_point* other);

  // implements Message ----------------------------------------------

  inline lidar_raw_point* New() const { return New(NULL); }

  lidar_raw_point* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const lidar_raw_point& from);
  void MergeFrom(const lidar_raw_point& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(lidar_raw_point* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional float angle = 1;
  void clear_angle();
  static const int kAngleFieldNumber = 1;
  float angle() const;
  void set_angle(float value);

  // optional float distance = 2;
  void clear_distance();
  static const int kDistanceFieldNumber = 2;
  float distance() const;
  void set_distance(float value);

  // optional uint32 quality = 3;
  void clear_quality();
  static const int kQualityFieldNumber = 3;
  ::google::protobuf::uint32 quality() const;
  void set_quality(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:device.lidar_raw_point)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  float angle_;
  float distance_;
  ::google::protobuf::uint32 quality_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_lidar_2eproto();
  friend void protobuf_AssignDesc_lidar_2eproto();
  friend void protobuf_ShutdownFile_lidar_2eproto();

  void InitAsDefaultInstance();
  static lidar_raw_point* default_instance_;
};
// -------------------------------------------------------------------

class lidar_raw_points : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:device.lidar_raw_points) */ {
 public:
  lidar_raw_points();
  virtual ~lidar_raw_points();

  lidar_raw_points(const lidar_raw_points& from);

  inline lidar_raw_points& operator=(const lidar_raw_points& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const lidar_raw_points& default_instance();

  void Swap(lidar_raw_points* other);

  // implements Message ----------------------------------------------

  inline lidar_raw_points* New() const { return New(NULL); }

  lidar_raw_points* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const lidar_raw_points& from);
  void MergeFrom(const lidar_raw_points& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(lidar_raw_points* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .device.lidar_raw_point points = 1;
  int points_size() const;
  void clear_points();
  static const int kPointsFieldNumber = 1;
  const ::device::lidar_raw_point& points(int index) const;
  ::device::lidar_raw_point* mutable_points(int index);
  ::device::lidar_raw_point* add_points();
  ::google::protobuf::RepeatedPtrField< ::device::lidar_raw_point >*
      mutable_points();
  const ::google::protobuf::RepeatedPtrField< ::device::lidar_raw_point >&
      points() const;

  // @@protoc_insertion_point(class_scope:device.lidar_raw_points)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::RepeatedPtrField< ::device::lidar_raw_point > points_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_lidar_2eproto();
  friend void protobuf_AssignDesc_lidar_2eproto();
  friend void protobuf_ShutdownFile_lidar_2eproto();

  void InitAsDefaultInstance();
  static lidar_raw_points* default_instance_;
};
// -------------------------------------------------------------------

class connect_info : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:device.connect_info) */ {
 public:
  connect_info();
  virtual ~connect_info();

  connect_info(const connect_info& from);

  inline connect_info& operator=(const connect_info& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const connect_info& default_instance();

  void Swap(connect_info* other);

  // implements Message ----------------------------------------------

  inline connect_info* New() const { return New(NULL); }

  connect_info* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const connect_info& from);
  void MergeFrom(const connect_info& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(connect_info* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string path = 1;
  void clear_path();
  static const int kPathFieldNumber = 1;
  const ::std::string& path() const;
  void set_path(const ::std::string& value);
  void set_path(const char* value);
  void set_path(const char* value, size_t size);
  ::std::string* mutable_path();
  ::std::string* release_path();
  void set_allocated_path(::std::string* path);

  // @@protoc_insertion_point(class_scope:device.connect_info)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::internal::ArenaStringPtr path_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_lidar_2eproto();
  friend void protobuf_AssignDesc_lidar_2eproto();
  friend void protobuf_ShutdownFile_lidar_2eproto();

  void InitAsDefaultInstance();
  static connect_info* default_instance_;
};
// -------------------------------------------------------------------

class token : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:device.token) */ {
 public:
  token();
  virtual ~token();

  token(const token& from);

  inline token& operator=(const token& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const token& default_instance();

  void Swap(token* other);

  // implements Message ----------------------------------------------

  inline token* New() const { return New(NULL); }

  token* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const token& from);
  void MergeFrom(const token& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(token* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string key = 1;
  void clear_key();
  static const int kKeyFieldNumber = 1;
  const ::std::string& key() const;
  void set_key(const ::std::string& value);
  void set_key(const char* value);
  void set_key(const char* value, size_t size);
  ::std::string* mutable_key();
  ::std::string* release_key();
  void set_allocated_key(::std::string* key);

  // @@protoc_insertion_point(class_scope:device.token)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::internal::ArenaStringPtr key_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_lidar_2eproto();
  friend void protobuf_AssignDesc_lidar_2eproto();
  friend void protobuf_ShutdownFile_lidar_2eproto();

  void InitAsDefaultInstance();
  static token* default_instance_;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
// lidar_raw_point

// optional float angle = 1;
inline void lidar_raw_point::clear_angle() {
  angle_ = 0;
}
inline float lidar_raw_point::angle() const {
  // @@protoc_insertion_point(field_get:device.lidar_raw_point.angle)
  return angle_;
}
inline void lidar_raw_point::set_angle(float value) {
  
  angle_ = value;
  // @@protoc_insertion_point(field_set:device.lidar_raw_point.angle)
}

// optional float distance = 2;
inline void lidar_raw_point::clear_distance() {
  distance_ = 0;
}
inline float lidar_raw_point::distance() const {
  // @@protoc_insertion_point(field_get:device.lidar_raw_point.distance)
  return distance_;
}
inline void lidar_raw_point::set_distance(float value) {
  
  distance_ = value;
  // @@protoc_insertion_point(field_set:device.lidar_raw_point.distance)
}

// optional uint32 quality = 3;
inline void lidar_raw_point::clear_quality() {
  quality_ = 0u;
}
inline ::google::protobuf::uint32 lidar_raw_point::quality() const {
  // @@protoc_insertion_point(field_get:device.lidar_raw_point.quality)
  return quality_;
}
inline void lidar_raw_point::set_quality(::google::protobuf::uint32 value) {
  
  quality_ = value;
  // @@protoc_insertion_point(field_set:device.lidar_raw_point.quality)
}

// -------------------------------------------------------------------

// lidar_raw_points

// repeated .device.lidar_raw_point points = 1;
inline int lidar_raw_points::points_size() const {
  return points_.size();
}
inline void lidar_raw_points::clear_points() {
  points_.Clear();
}
inline const ::device::lidar_raw_point& lidar_raw_points::points(int index) const {
  // @@protoc_insertion_point(field_get:device.lidar_raw_points.points)
  return points_.Get(index);
}
inline ::device::lidar_raw_point* lidar_raw_points::mutable_points(int index) {
  // @@protoc_insertion_point(field_mutable:device.lidar_raw_points.points)
  return points_.Mutable(index);
}
inline ::device::lidar_raw_point* lidar_raw_points::add_points() {
  // @@protoc_insertion_point(field_add:device.lidar_raw_points.points)
  return points_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::device::lidar_raw_point >*
lidar_raw_points::mutable_points() {
  // @@protoc_insertion_point(field_mutable_list:device.lidar_raw_points.points)
  return &points_;
}
inline const ::google::protobuf::RepeatedPtrField< ::device::lidar_raw_point >&
lidar_raw_points::points() const {
  // @@protoc_insertion_point(field_list:device.lidar_raw_points.points)
  return points_;
}

// -------------------------------------------------------------------

// connect_info

// optional string path = 1;
inline void connect_info::clear_path() {
  path_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& connect_info::path() const {
  // @@protoc_insertion_point(field_get:device.connect_info.path)
  return path_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void connect_info::set_path(const ::std::string& value) {
  
  path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:device.connect_info.path)
}
inline void connect_info::set_path(const char* value) {
  
  path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:device.connect_info.path)
}
inline void connect_info::set_path(const char* value, size_t size) {
  
  path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:device.connect_info.path)
}
inline ::std::string* connect_info::mutable_path() {
  
  // @@protoc_insertion_point(field_mutable:device.connect_info.path)
  return path_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* connect_info::release_path() {
  // @@protoc_insertion_point(field_release:device.connect_info.path)
  
  return path_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void connect_info::set_allocated_path(::std::string* path) {
  if (path != NULL) {
    
  } else {
    
  }
  path_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), path);
  // @@protoc_insertion_point(field_set_allocated:device.connect_info.path)
}

// -------------------------------------------------------------------

// token

// optional string key = 1;
inline void token::clear_key() {
  key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& token::key() const {
  // @@protoc_insertion_point(field_get:device.token.key)
  return key_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void token::set_key(const ::std::string& value) {
  
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:device.token.key)
}
inline void token::set_key(const char* value) {
  
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:device.token.key)
}
inline void token::set_key(const char* value, size_t size) {
  
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:device.token.key)
}
inline ::std::string* token::mutable_key() {
  
  // @@protoc_insertion_point(field_mutable:device.token.key)
  return key_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* token::release_key() {
  // @@protoc_insertion_point(field_release:device.token.key)
  
  return key_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void token::set_allocated_key(::std::string* key) {
  if (key != NULL) {
    
  } else {
    
  }
  key_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), key);
  // @@protoc_insertion_point(field_set_allocated:device.token.key)
}

#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace device

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_lidar_2eproto__INCLUDED
