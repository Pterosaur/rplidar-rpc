// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: lidar.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "lidar.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace device {

namespace {

const ::google::protobuf::Descriptor* lidar_raw_point_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  lidar_raw_point_reflection_ = NULL;
const ::google::protobuf::Descriptor* lidar_raw_points_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  lidar_raw_points_reflection_ = NULL;
const ::google::protobuf::Descriptor* connect_info_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  connect_info_reflection_ = NULL;
const ::google::protobuf::Descriptor* token_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  token_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_lidar_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AssignDesc_lidar_2eproto() {
  protobuf_AddDesc_lidar_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "lidar.proto");
  GOOGLE_CHECK(file != NULL);
  lidar_raw_point_descriptor_ = file->message_type(0);
  static const int lidar_raw_point_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(lidar_raw_point, angle_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(lidar_raw_point, distance_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(lidar_raw_point, quality_),
  };
  lidar_raw_point_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      lidar_raw_point_descriptor_,
      lidar_raw_point::default_instance_,
      lidar_raw_point_offsets_,
      -1,
      -1,
      -1,
      sizeof(lidar_raw_point),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(lidar_raw_point, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(lidar_raw_point, _is_default_instance_));
  lidar_raw_points_descriptor_ = file->message_type(1);
  static const int lidar_raw_points_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(lidar_raw_points, points_),
  };
  lidar_raw_points_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      lidar_raw_points_descriptor_,
      lidar_raw_points::default_instance_,
      lidar_raw_points_offsets_,
      -1,
      -1,
      -1,
      sizeof(lidar_raw_points),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(lidar_raw_points, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(lidar_raw_points, _is_default_instance_));
  connect_info_descriptor_ = file->message_type(2);
  static const int connect_info_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(connect_info, path_),
  };
  connect_info_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      connect_info_descriptor_,
      connect_info::default_instance_,
      connect_info_offsets_,
      -1,
      -1,
      -1,
      sizeof(connect_info),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(connect_info, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(connect_info, _is_default_instance_));
  token_descriptor_ = file->message_type(3);
  static const int token_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(token, key_),
  };
  token_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      token_descriptor_,
      token::default_instance_,
      token_offsets_,
      -1,
      -1,
      -1,
      sizeof(token),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(token, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(token, _is_default_instance_));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_lidar_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      lidar_raw_point_descriptor_, &lidar_raw_point::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      lidar_raw_points_descriptor_, &lidar_raw_points::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      connect_info_descriptor_, &connect_info::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      token_descriptor_, &token::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_lidar_2eproto() {
  delete lidar_raw_point::default_instance_;
  delete lidar_raw_point_reflection_;
  delete lidar_raw_points::default_instance_;
  delete lidar_raw_points_reflection_;
  delete connect_info::default_instance_;
  delete connect_info_reflection_;
  delete token::default_instance_;
  delete token_reflection_;
}

void protobuf_AddDesc_lidar_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AddDesc_lidar_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::protobuf_AddDesc_google_2fprotobuf_2fempty_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\013lidar.proto\022\006device\032\033google/protobuf/e"
    "mpty.proto\"C\n\017lidar_raw_point\022\r\n\005angle\030\001"
    " \001(\002\022\020\n\010distance\030\002 \001(\002\022\017\n\007quality\030\003 \001(\r\""
    ";\n\020lidar_raw_points\022\'\n\006points\030\001 \003(\0132\027.de"
    "vice.lidar_raw_point\"\034\n\014connect_info\022\014\n\004"
    "path\030\001 \001(\t\"\024\n\005token\022\013\n\003key\030\001 \001(\t2\333\001\n\014lid"
    "ar_server\022/\n\006create\022\024.device.connect_inf"
    "o\032\r.device.token\"\000\0220\n\005start\022\r.device.tok"
    "en\032\026.google.protobuf.Empty\"\000\022/\n\004stop\022\r.d"
    "evice.token\032\026.google.protobuf.Empty\"\000\0227\n"
    "\nget_points\022\r.device.token\032\030.device.lida"
    "r_raw_points\"\000b\006proto3", 462);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "lidar.proto", &protobuf_RegisterTypes);
  lidar_raw_point::default_instance_ = new lidar_raw_point();
  lidar_raw_points::default_instance_ = new lidar_raw_points();
  connect_info::default_instance_ = new connect_info();
  token::default_instance_ = new token();
  lidar_raw_point::default_instance_->InitAsDefaultInstance();
  lidar_raw_points::default_instance_->InitAsDefaultInstance();
  connect_info::default_instance_->InitAsDefaultInstance();
  token::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_lidar_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_lidar_2eproto {
  StaticDescriptorInitializer_lidar_2eproto() {
    protobuf_AddDesc_lidar_2eproto();
  }
} static_descriptor_initializer_lidar_2eproto_;

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int lidar_raw_point::kAngleFieldNumber;
const int lidar_raw_point::kDistanceFieldNumber;
const int lidar_raw_point::kQualityFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

lidar_raw_point::lidar_raw_point()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:device.lidar_raw_point)
}

void lidar_raw_point::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

lidar_raw_point::lidar_raw_point(const lidar_raw_point& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:device.lidar_raw_point)
}

void lidar_raw_point::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  angle_ = 0;
  distance_ = 0;
  quality_ = 0u;
}

lidar_raw_point::~lidar_raw_point() {
  // @@protoc_insertion_point(destructor:device.lidar_raw_point)
  SharedDtor();
}

void lidar_raw_point::SharedDtor() {
  if (this != default_instance_) {
  }
}

void lidar_raw_point::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* lidar_raw_point::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return lidar_raw_point_descriptor_;
}

const lidar_raw_point& lidar_raw_point::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_lidar_2eproto();
  return *default_instance_;
}

lidar_raw_point* lidar_raw_point::default_instance_ = NULL;

lidar_raw_point* lidar_raw_point::New(::google::protobuf::Arena* arena) const {
  lidar_raw_point* n = new lidar_raw_point;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void lidar_raw_point::Clear() {
// @@protoc_insertion_point(message_clear_start:device.lidar_raw_point)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(lidar_raw_point, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<lidar_raw_point*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(angle_, quality_);

#undef ZR_HELPER_
#undef ZR_

}

bool lidar_raw_point::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:device.lidar_raw_point)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional float angle = 1;
      case 1: {
        if (tag == 13) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &angle_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(21)) goto parse_distance;
        break;
      }

      // optional float distance = 2;
      case 2: {
        if (tag == 21) {
         parse_distance:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &distance_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_quality;
        break;
      }

      // optional uint32 quality = 3;
      case 3: {
        if (tag == 24) {
         parse_quality:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &quality_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:device.lidar_raw_point)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:device.lidar_raw_point)
  return false;
#undef DO_
}

void lidar_raw_point::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:device.lidar_raw_point)
  // optional float angle = 1;
  if (this->angle() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->angle(), output);
  }

  // optional float distance = 2;
  if (this->distance() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->distance(), output);
  }

  // optional uint32 quality = 3;
  if (this->quality() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->quality(), output);
  }

  // @@protoc_insertion_point(serialize_end:device.lidar_raw_point)
}

::google::protobuf::uint8* lidar_raw_point::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:device.lidar_raw_point)
  // optional float angle = 1;
  if (this->angle() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(1, this->angle(), target);
  }

  // optional float distance = 2;
  if (this->distance() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->distance(), target);
  }

  // optional uint32 quality = 3;
  if (this->quality() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->quality(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:device.lidar_raw_point)
  return target;
}

int lidar_raw_point::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:device.lidar_raw_point)
  int total_size = 0;

  // optional float angle = 1;
  if (this->angle() != 0) {
    total_size += 1 + 4;
  }

  // optional float distance = 2;
  if (this->distance() != 0) {
    total_size += 1 + 4;
  }

  // optional uint32 quality = 3;
  if (this->quality() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->quality());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void lidar_raw_point::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:device.lidar_raw_point)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const lidar_raw_point* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const lidar_raw_point>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:device.lidar_raw_point)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:device.lidar_raw_point)
    MergeFrom(*source);
  }
}

void lidar_raw_point::MergeFrom(const lidar_raw_point& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:device.lidar_raw_point)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.angle() != 0) {
    set_angle(from.angle());
  }
  if (from.distance() != 0) {
    set_distance(from.distance());
  }
  if (from.quality() != 0) {
    set_quality(from.quality());
  }
}

void lidar_raw_point::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:device.lidar_raw_point)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void lidar_raw_point::CopyFrom(const lidar_raw_point& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:device.lidar_raw_point)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool lidar_raw_point::IsInitialized() const {

  return true;
}

void lidar_raw_point::Swap(lidar_raw_point* other) {
  if (other == this) return;
  InternalSwap(other);
}
void lidar_raw_point::InternalSwap(lidar_raw_point* other) {
  std::swap(angle_, other->angle_);
  std::swap(distance_, other->distance_);
  std::swap(quality_, other->quality_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata lidar_raw_point::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = lidar_raw_point_descriptor_;
  metadata.reflection = lidar_raw_point_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// lidar_raw_point

// optional float angle = 1;
void lidar_raw_point::clear_angle() {
  angle_ = 0;
}
 float lidar_raw_point::angle() const {
  // @@protoc_insertion_point(field_get:device.lidar_raw_point.angle)
  return angle_;
}
 void lidar_raw_point::set_angle(float value) {
  
  angle_ = value;
  // @@protoc_insertion_point(field_set:device.lidar_raw_point.angle)
}

// optional float distance = 2;
void lidar_raw_point::clear_distance() {
  distance_ = 0;
}
 float lidar_raw_point::distance() const {
  // @@protoc_insertion_point(field_get:device.lidar_raw_point.distance)
  return distance_;
}
 void lidar_raw_point::set_distance(float value) {
  
  distance_ = value;
  // @@protoc_insertion_point(field_set:device.lidar_raw_point.distance)
}

// optional uint32 quality = 3;
void lidar_raw_point::clear_quality() {
  quality_ = 0u;
}
 ::google::protobuf::uint32 lidar_raw_point::quality() const {
  // @@protoc_insertion_point(field_get:device.lidar_raw_point.quality)
  return quality_;
}
 void lidar_raw_point::set_quality(::google::protobuf::uint32 value) {
  
  quality_ = value;
  // @@protoc_insertion_point(field_set:device.lidar_raw_point.quality)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int lidar_raw_points::kPointsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

lidar_raw_points::lidar_raw_points()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:device.lidar_raw_points)
}

void lidar_raw_points::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

lidar_raw_points::lidar_raw_points(const lidar_raw_points& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:device.lidar_raw_points)
}

void lidar_raw_points::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
}

lidar_raw_points::~lidar_raw_points() {
  // @@protoc_insertion_point(destructor:device.lidar_raw_points)
  SharedDtor();
}

void lidar_raw_points::SharedDtor() {
  if (this != default_instance_) {
  }
}

void lidar_raw_points::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* lidar_raw_points::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return lidar_raw_points_descriptor_;
}

const lidar_raw_points& lidar_raw_points::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_lidar_2eproto();
  return *default_instance_;
}

lidar_raw_points* lidar_raw_points::default_instance_ = NULL;

lidar_raw_points* lidar_raw_points::New(::google::protobuf::Arena* arena) const {
  lidar_raw_points* n = new lidar_raw_points;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void lidar_raw_points::Clear() {
// @@protoc_insertion_point(message_clear_start:device.lidar_raw_points)
  points_.Clear();
}

bool lidar_raw_points::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:device.lidar_raw_points)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .device.lidar_raw_point points = 1;
      case 1: {
        if (tag == 10) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_points:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_points()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_loop_points;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:device.lidar_raw_points)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:device.lidar_raw_points)
  return false;
#undef DO_
}

void lidar_raw_points::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:device.lidar_raw_points)
  // repeated .device.lidar_raw_point points = 1;
  for (unsigned int i = 0, n = this->points_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->points(i), output);
  }

  // @@protoc_insertion_point(serialize_end:device.lidar_raw_points)
}

::google::protobuf::uint8* lidar_raw_points::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:device.lidar_raw_points)
  // repeated .device.lidar_raw_point points = 1;
  for (unsigned int i = 0, n = this->points_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, this->points(i), false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:device.lidar_raw_points)
  return target;
}

int lidar_raw_points::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:device.lidar_raw_points)
  int total_size = 0;

  // repeated .device.lidar_raw_point points = 1;
  total_size += 1 * this->points_size();
  for (int i = 0; i < this->points_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->points(i));
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void lidar_raw_points::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:device.lidar_raw_points)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const lidar_raw_points* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const lidar_raw_points>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:device.lidar_raw_points)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:device.lidar_raw_points)
    MergeFrom(*source);
  }
}

void lidar_raw_points::MergeFrom(const lidar_raw_points& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:device.lidar_raw_points)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  points_.MergeFrom(from.points_);
}

void lidar_raw_points::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:device.lidar_raw_points)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void lidar_raw_points::CopyFrom(const lidar_raw_points& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:device.lidar_raw_points)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool lidar_raw_points::IsInitialized() const {

  return true;
}

void lidar_raw_points::Swap(lidar_raw_points* other) {
  if (other == this) return;
  InternalSwap(other);
}
void lidar_raw_points::InternalSwap(lidar_raw_points* other) {
  points_.UnsafeArenaSwap(&other->points_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata lidar_raw_points::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = lidar_raw_points_descriptor_;
  metadata.reflection = lidar_raw_points_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// lidar_raw_points

// repeated .device.lidar_raw_point points = 1;
int lidar_raw_points::points_size() const {
  return points_.size();
}
void lidar_raw_points::clear_points() {
  points_.Clear();
}
const ::device::lidar_raw_point& lidar_raw_points::points(int index) const {
  // @@protoc_insertion_point(field_get:device.lidar_raw_points.points)
  return points_.Get(index);
}
::device::lidar_raw_point* lidar_raw_points::mutable_points(int index) {
  // @@protoc_insertion_point(field_mutable:device.lidar_raw_points.points)
  return points_.Mutable(index);
}
::device::lidar_raw_point* lidar_raw_points::add_points() {
  // @@protoc_insertion_point(field_add:device.lidar_raw_points.points)
  return points_.Add();
}
::google::protobuf::RepeatedPtrField< ::device::lidar_raw_point >*
lidar_raw_points::mutable_points() {
  // @@protoc_insertion_point(field_mutable_list:device.lidar_raw_points.points)
  return &points_;
}
const ::google::protobuf::RepeatedPtrField< ::device::lidar_raw_point >&
lidar_raw_points::points() const {
  // @@protoc_insertion_point(field_list:device.lidar_raw_points.points)
  return points_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int connect_info::kPathFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

connect_info::connect_info()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:device.connect_info)
}

void connect_info::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

connect_info::connect_info(const connect_info& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:device.connect_info)
}

void connect_info::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  path_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

connect_info::~connect_info() {
  // @@protoc_insertion_point(destructor:device.connect_info)
  SharedDtor();
}

void connect_info::SharedDtor() {
  path_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void connect_info::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* connect_info::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return connect_info_descriptor_;
}

const connect_info& connect_info::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_lidar_2eproto();
  return *default_instance_;
}

connect_info* connect_info::default_instance_ = NULL;

connect_info* connect_info::New(::google::protobuf::Arena* arena) const {
  connect_info* n = new connect_info;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void connect_info::Clear() {
// @@protoc_insertion_point(message_clear_start:device.connect_info)
  path_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool connect_info::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:device.connect_info)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string path = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_path()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->path().data(), this->path().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "device.connect_info.path"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:device.connect_info)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:device.connect_info)
  return false;
#undef DO_
}

void connect_info::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:device.connect_info)
  // optional string path = 1;
  if (this->path().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->path().data(), this->path().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "device.connect_info.path");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->path(), output);
  }

  // @@protoc_insertion_point(serialize_end:device.connect_info)
}

::google::protobuf::uint8* connect_info::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:device.connect_info)
  // optional string path = 1;
  if (this->path().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->path().data(), this->path().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "device.connect_info.path");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->path(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:device.connect_info)
  return target;
}

int connect_info::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:device.connect_info)
  int total_size = 0;

  // optional string path = 1;
  if (this->path().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->path());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void connect_info::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:device.connect_info)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const connect_info* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const connect_info>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:device.connect_info)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:device.connect_info)
    MergeFrom(*source);
  }
}

void connect_info::MergeFrom(const connect_info& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:device.connect_info)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.path().size() > 0) {

    path_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.path_);
  }
}

void connect_info::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:device.connect_info)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void connect_info::CopyFrom(const connect_info& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:device.connect_info)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool connect_info::IsInitialized() const {

  return true;
}

void connect_info::Swap(connect_info* other) {
  if (other == this) return;
  InternalSwap(other);
}
void connect_info::InternalSwap(connect_info* other) {
  path_.Swap(&other->path_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata connect_info::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = connect_info_descriptor_;
  metadata.reflection = connect_info_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// connect_info

// optional string path = 1;
void connect_info::clear_path() {
  path_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& connect_info::path() const {
  // @@protoc_insertion_point(field_get:device.connect_info.path)
  return path_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void connect_info::set_path(const ::std::string& value) {
  
  path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:device.connect_info.path)
}
 void connect_info::set_path(const char* value) {
  
  path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:device.connect_info.path)
}
 void connect_info::set_path(const char* value, size_t size) {
  
  path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:device.connect_info.path)
}
 ::std::string* connect_info::mutable_path() {
  
  // @@protoc_insertion_point(field_mutable:device.connect_info.path)
  return path_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* connect_info::release_path() {
  // @@protoc_insertion_point(field_release:device.connect_info.path)
  
  return path_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void connect_info::set_allocated_path(::std::string* path) {
  if (path != NULL) {
    
  } else {
    
  }
  path_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), path);
  // @@protoc_insertion_point(field_set_allocated:device.connect_info.path)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int token::kKeyFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

token::token()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:device.token)
}

void token::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

token::token(const token& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:device.token)
}

void token::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

token::~token() {
  // @@protoc_insertion_point(destructor:device.token)
  SharedDtor();
}

void token::SharedDtor() {
  key_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void token::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* token::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return token_descriptor_;
}

const token& token::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_lidar_2eproto();
  return *default_instance_;
}

token* token::default_instance_ = NULL;

token* token::New(::google::protobuf::Arena* arena) const {
  token* n = new token;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void token::Clear() {
// @@protoc_insertion_point(message_clear_start:device.token)
  key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool token::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:device.token)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string key = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_key()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->key().data(), this->key().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "device.token.key"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:device.token)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:device.token)
  return false;
#undef DO_
}

void token::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:device.token)
  // optional string key = 1;
  if (this->key().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->key().data(), this->key().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "device.token.key");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->key(), output);
  }

  // @@protoc_insertion_point(serialize_end:device.token)
}

::google::protobuf::uint8* token::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:device.token)
  // optional string key = 1;
  if (this->key().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->key().data(), this->key().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "device.token.key");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->key(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:device.token)
  return target;
}

int token::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:device.token)
  int total_size = 0;

  // optional string key = 1;
  if (this->key().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->key());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void token::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:device.token)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const token* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const token>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:device.token)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:device.token)
    MergeFrom(*source);
  }
}

void token::MergeFrom(const token& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:device.token)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.key().size() > 0) {

    key_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.key_);
  }
}

void token::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:device.token)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void token::CopyFrom(const token& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:device.token)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool token::IsInitialized() const {

  return true;
}

void token::Swap(token* other) {
  if (other == this) return;
  InternalSwap(other);
}
void token::InternalSwap(token* other) {
  key_.Swap(&other->key_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata token::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = token_descriptor_;
  metadata.reflection = token_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// token

// optional string key = 1;
void token::clear_key() {
  key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& token::key() const {
  // @@protoc_insertion_point(field_get:device.token.key)
  return key_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void token::set_key(const ::std::string& value) {
  
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:device.token.key)
}
 void token::set_key(const char* value) {
  
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:device.token.key)
}
 void token::set_key(const char* value, size_t size) {
  
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:device.token.key)
}
 ::std::string* token::mutable_key() {
  
  // @@protoc_insertion_point(field_mutable:device.token.key)
  return key_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* token::release_key() {
  // @@protoc_insertion_point(field_release:device.token.key)
  
  return key_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void token::set_allocated_key(::std::string* key) {
  if (key != NULL) {
    
  } else {
    
  }
  key_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), key);
  // @@protoc_insertion_point(field_set_allocated:device.token.key)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace device

// @@protoc_insertion_point(global_scope)
