// Generated by the gRPC protobuf plugin.
// If you make any local change, they will be lost.
// source: lidar.proto
#ifndef GRPC_lidar_2eproto__INCLUDED
#define GRPC_lidar_2eproto__INCLUDED

#include "lidar.pb.h"

#include <grpc++/impl/codegen/async_stream.h>
#include <grpc++/impl/codegen/async_unary_call.h>
#include <grpc++/impl/codegen/proto_utils.h>
#include <grpc++/impl/codegen/rpc_method.h>
#include <grpc++/impl/codegen/service_type.h>
#include <grpc++/impl/codegen/status.h>
#include <grpc++/impl/codegen/stub_options.h>
#include <grpc++/impl/codegen/sync_stream.h>

namespace grpc {
class CompletionQueue;
class Channel;
class RpcService;
class ServerCompletionQueue;
class ServerContext;
}  // namespace grpc

namespace device {

class lidar_server GRPC_FINAL {
 public:
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    virtual ::grpc::Status create(::grpc::ClientContext* context, const ::device::connect_info& request, ::device::token* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::device::token>> Asynccreate(::grpc::ClientContext* context, const ::device::connect_info& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::device::token>>(AsynccreateRaw(context, request, cq));
    }
    virtual ::grpc::Status start(::grpc::ClientContext* context, const ::device::token& request, ::google::protobuf::Empty* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>> Asyncstart(::grpc::ClientContext* context, const ::device::token& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>>(AsyncstartRaw(context, request, cq));
    }
    virtual ::grpc::Status stop(::grpc::ClientContext* context, const ::device::token& request, ::google::protobuf::Empty* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>> Asyncstop(::grpc::ClientContext* context, const ::device::token& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>>(AsyncstopRaw(context, request, cq));
    }
    virtual ::grpc::Status get_points(::grpc::ClientContext* context, const ::device::token& request, ::device::lidar_raw_points* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::device::lidar_raw_points>> Asyncget_points(::grpc::ClientContext* context, const ::device::token& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::device::lidar_raw_points>>(Asyncget_pointsRaw(context, request, cq));
    }
  private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::device::token>* AsynccreateRaw(::grpc::ClientContext* context, const ::device::connect_info& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>* AsyncstartRaw(::grpc::ClientContext* context, const ::device::token& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>* AsyncstopRaw(::grpc::ClientContext* context, const ::device::token& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::device::lidar_raw_points>* Asyncget_pointsRaw(::grpc::ClientContext* context, const ::device::token& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub GRPC_FINAL : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel);
    ::grpc::Status create(::grpc::ClientContext* context, const ::device::connect_info& request, ::device::token* response) GRPC_OVERRIDE;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::device::token>> Asynccreate(::grpc::ClientContext* context, const ::device::connect_info& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::device::token>>(AsynccreateRaw(context, request, cq));
    }
    ::grpc::Status start(::grpc::ClientContext* context, const ::device::token& request, ::google::protobuf::Empty* response) GRPC_OVERRIDE;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>> Asyncstart(::grpc::ClientContext* context, const ::device::token& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>>(AsyncstartRaw(context, request, cq));
    }
    ::grpc::Status stop(::grpc::ClientContext* context, const ::device::token& request, ::google::protobuf::Empty* response) GRPC_OVERRIDE;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>> Asyncstop(::grpc::ClientContext* context, const ::device::token& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>>(AsyncstopRaw(context, request, cq));
    }
    ::grpc::Status get_points(::grpc::ClientContext* context, const ::device::token& request, ::device::lidar_raw_points* response) GRPC_OVERRIDE;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::device::lidar_raw_points>> Asyncget_points(::grpc::ClientContext* context, const ::device::token& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::device::lidar_raw_points>>(Asyncget_pointsRaw(context, request, cq));
    }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    ::grpc::ClientAsyncResponseReader< ::device::token>* AsynccreateRaw(::grpc::ClientContext* context, const ::device::connect_info& request, ::grpc::CompletionQueue* cq) GRPC_OVERRIDE;
    ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* AsyncstartRaw(::grpc::ClientContext* context, const ::device::token& request, ::grpc::CompletionQueue* cq) GRPC_OVERRIDE;
    ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* AsyncstopRaw(::grpc::ClientContext* context, const ::device::token& request, ::grpc::CompletionQueue* cq) GRPC_OVERRIDE;
    ::grpc::ClientAsyncResponseReader< ::device::lidar_raw_points>* Asyncget_pointsRaw(::grpc::ClientContext* context, const ::device::token& request, ::grpc::CompletionQueue* cq) GRPC_OVERRIDE;
    const ::grpc::RpcMethod rpcmethod_create_;
    const ::grpc::RpcMethod rpcmethod_start_;
    const ::grpc::RpcMethod rpcmethod_stop_;
    const ::grpc::RpcMethod rpcmethod_get_points_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    virtual ::grpc::Status create(::grpc::ServerContext* context, const ::device::connect_info* request, ::device::token* response);
    virtual ::grpc::Status start(::grpc::ServerContext* context, const ::device::token* request, ::google::protobuf::Empty* response);
    virtual ::grpc::Status stop(::grpc::ServerContext* context, const ::device::token* request, ::google::protobuf::Empty* response);
    virtual ::grpc::Status get_points(::grpc::ServerContext* context, const ::device::token* request, ::device::lidar_raw_points* response);
  };
  template <class BaseClass>
  class WithAsyncMethod_create : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_create() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_create() GRPC_OVERRIDE {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status create(::grpc::ServerContext* context, const ::device::connect_info* request, ::device::token* response) GRPC_FINAL GRPC_OVERRIDE {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void Requestcreate(::grpc::ServerContext* context, ::device::connect_info* request, ::grpc::ServerAsyncResponseWriter< ::device::token>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_start : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_start() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_start() GRPC_OVERRIDE {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status start(::grpc::ServerContext* context, const ::device::token* request, ::google::protobuf::Empty* response) GRPC_FINAL GRPC_OVERRIDE {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void Requeststart(::grpc::ServerContext* context, ::device::token* request, ::grpc::ServerAsyncResponseWriter< ::google::protobuf::Empty>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_stop : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_stop() {
      ::grpc::Service::MarkMethodAsync(2);
    }
    ~WithAsyncMethod_stop() GRPC_OVERRIDE {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status stop(::grpc::ServerContext* context, const ::device::token* request, ::google::protobuf::Empty* response) GRPC_FINAL GRPC_OVERRIDE {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void Requeststop(::grpc::ServerContext* context, ::device::token* request, ::grpc::ServerAsyncResponseWriter< ::google::protobuf::Empty>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_get_points : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_get_points() {
      ::grpc::Service::MarkMethodAsync(3);
    }
    ~WithAsyncMethod_get_points() GRPC_OVERRIDE {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status get_points(::grpc::ServerContext* context, const ::device::token* request, ::device::lidar_raw_points* response) GRPC_FINAL GRPC_OVERRIDE {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void Requestget_points(::grpc::ServerContext* context, ::device::token* request, ::grpc::ServerAsyncResponseWriter< ::device::lidar_raw_points>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_create<WithAsyncMethod_start<WithAsyncMethod_stop<WithAsyncMethod_get_points<Service > > > > AsyncService;
  template <class BaseClass>
  class WithGenericMethod_create : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_create() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_create() GRPC_OVERRIDE {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status create(::grpc::ServerContext* context, const ::device::connect_info* request, ::device::token* response) GRPC_FINAL GRPC_OVERRIDE {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_start : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_start() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_start() GRPC_OVERRIDE {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status start(::grpc::ServerContext* context, const ::device::token* request, ::google::protobuf::Empty* response) GRPC_FINAL GRPC_OVERRIDE {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_stop : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_stop() {
      ::grpc::Service::MarkMethodGeneric(2);
    }
    ~WithGenericMethod_stop() GRPC_OVERRIDE {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status stop(::grpc::ServerContext* context, const ::device::token* request, ::google::protobuf::Empty* response) GRPC_FINAL GRPC_OVERRIDE {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_get_points : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_get_points() {
      ::grpc::Service::MarkMethodGeneric(3);
    }
    ~WithGenericMethod_get_points() GRPC_OVERRIDE {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status get_points(::grpc::ServerContext* context, const ::device::token* request, ::device::lidar_raw_points* response) GRPC_FINAL GRPC_OVERRIDE {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
};

}  // namespace device


#endif  // GRPC_lidar_2eproto__INCLUDED
